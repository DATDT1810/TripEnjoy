@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="container-fluid booking pb-5 wow fadeIn" data-wow-delay="0.1s">
    <div class="container">
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <ul>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }
        <form method="post">
            <div class="bg-white shadow" style="padding: 35px;">
                <div class="mb-4">
                    <div class="d-flex flex-wrap gap-2">
                        @if (Model.ListCategory != null && Model.ListCategory.Any())
                        {
                            var firstCategoryId = Model.ListCategory.First().CategoryId;
                            @foreach (var category in Model.ListCategory)
                            {
                                var isSelected = category.CategoryId == firstCategoryId ? "selected" : "";
                                <div class="category-oval @isSelected" onclick="selectedCategory(this, '@category.CategoryId')">@category.CategoryName</div>
                            }
                        }
                    </div>
                </div>
                <input type="hidden" id="CategoryId" name="categoryId" value="" />
                <div class="row">
                    <div class="col-md-10">
                        <div class="row g-0">
                            <div class="col-md-4 p-0">
                                <div class="autocomplete">
                                    <input id="myInput" type="text" name="hotelAddress" placeholder="Country">
                                </div>
                            </div>
                            <div class="col-md-4 p-0">
                                <div class="calendar">
                                    <input id="dateInput" name="dateBooking" type="text" placeholder="YYYY-MM-DD" readonly />
                                </div>
                                <div id="calendarContainer" class="calendar-container">
                                    <div id="currentMonthCalendar" class="calendarCurrentMonth"></div>
                                    <div id="nextMonthCalendar" class="calendarNextMonth"></div>
                                </div>
                            </div>
                            <div class="col-md-4 p-0">
                                <div class="room-type">
                                    <input id="roomtypeInput" name="roomtypeInput" type="text" value="1 người lớn, 0 trẻ em, 1 phòng" readonly />
                                </div>
                                <div id="roomtypeContainer" class="roomtype-container">
                                    <div class="roomtypeAdult">
                                        <p>Người lớn</p>
                                        <button id="decreaseAdultButton" type="button">-</button>
                                        <input type="number" id="adultCount" value="1" min="1" max="30" readonly />
                                        <button id="increaseAdultButton" type="button">+</button>
                                    </div>
                                    <div id="roomtypeChildrent" class="roomtypeChildrent">
                                        <p>Trẻ em</p>
                                        <button id="decreaseChildrentButton" type="button">-</button>
                                        <input type="number" id="childrentCount" value="0" min="0" max="6" readonly />
                                        <button id="increaseChildrentButton" type="button">+</button>
                                    </div>
                                    <div id="numberOfRoom" class="numberOfRoom">
                                        <p>Số lượng phòng</p>
                                        <button id="decreaseNumberOfRoomButton" type="button">-</button>
                                        <input type="number" id="numberOfRoomCount" value="1" min="1" max="8" readonly />
                                        <button id="increaseNumberOfRoomButton" type="button">+</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-warning text-white w-100">Find Rooms</button>
                    </div>

                </div>
            </div>
        </form>
    </div>
</div>
<!-- Vietnam Hotels Section -->
<div class="container mt-4">
    <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
        <h6 class="section-title text-center text-warning text-uppercase">Our Hotels</h6>
        <h1 class="mb-5">Explore <span class="text-warning text-uppercase">VietNam Hotels</span></h1>
    </div>
    <!-- Add the owl-carousel class here -->
    <div class="owl-carousel vietnam-hotels-carousel wow fadeInUp" data-wow-delay="0.1s">
        @if (Model.Hotels != null && Model.Hotels.Any())
        {
            @foreach (var hotel in Model.Hotels.Where(h => h.HotelAddress.Contains("VietNam", StringComparison.OrdinalIgnoreCase)))
            {
                var hotelImage = Model.HotelImages.FirstOrDefault(img => img.HotelId == hotel.HotelId);
                <a asp-page="" class="room-item rounded d-block text-decoration-none">
                    <div class="room-item rounded">
                        <div class="position-relative">
                            <img class="img-fluid" src="@hotelImage.ImageUrl" alt="Hotel Image">
                            <small class="position-absolute start-0 top-100 translate-middle-y bg-warning text-white rounded py-1 px-3 ms-4"><i class="fa fa-solid fa-hotel"></i>
                                @if (hotel.Category != null && !string.IsNullOrEmpty(hotel.Category.CategoryName))
                                {
                                    @hotel.Category.CategoryName
                                }
                                else
                                {
                                    @:Unknown Category
                                }
                            </small>
                        </div>
                        <div class="p-4 mt-2">
                            <h5 class="mb-0">@hotel.HotelName</h5>
                            <div class="d-flex justify-content-between mb-3">
                                <div class="ps-0">
                                    <small class="fa fa-star text-warning"></small>
                                    <small class="fa fa-star text-warning"></small>
                                    <small class="fa fa-star text-warning"></small>
                                    <small class="fa fa-star text-warning"></small>
                                    <small class="fa fa-star text-warning"></small>
                                </div>
                            </div>
                            <div class="d-flex mb-3">
                                <small class="border-end me-3 pe-3">
                                    <i class="fa-solid fa-location-dot text-warning me-2"></i>@hotel.HotelAddress
                                </small>
                            </div>
                            <p class="text-body mb-3">@hotel.HotelDescription</p>
                        </div>
                    </div>
                </a>
            }
        }
    </div>
</div>

<!-- International Hotels Section -->
<div class="container-xxl py-5">
    <div class="container">
        <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
            <h6 class="section-title text-center text-warning text-uppercase">Our Hotels</h6>
            <h1 class="mb-5">Explore <span class="text-warning text-uppercase">International Hotels</span></h1>
        </div>
        <div class="owl-carousel international-hotels-carousel wow fadeInUp" data-wow-delay="0.1s">
            @if (Model.Hotels != null && Model.Hotels.Any())
            {
                @foreach (var hotel in Model.Hotels.Where(h => !h.HotelAddress.Contains("VietNam", StringComparison.OrdinalIgnoreCase)))
                {
                    var hotelImage = Model.HotelImages.FirstOrDefault(img => img.HotelId == hotel.HotelId);
                    <a asp-page="" class="room-item rounded d-block text-decoration-none">
                        <div class="room-item rounded">
                            <div class="position-relative">
                               <img class="img-fluid" src="@hotelImage.ImageUrl" alt="Hotel Image">
                                <small class="position-absolute start-0 top-100 translate-middle-y bg-warning text-white rounded py-1 px-3 ms-4"><i class="fa fa-solid fa-hotel"></i>
                                    @if (hotel.Category != null && !string.IsNullOrEmpty(hotel.Category.CategoryName))
                                    {
                                        @hotel.Category.CategoryName
                                    }
                                    else
                                    {
                                        @:Unknown Category
                                    }
                                </small>
                            </div>
                            <div class="p-4 mt-2">
                                <h5 class="mb-0">@hotel.HotelName</h5>
                                <div class="d-flex justify-content-between mb-3">
                                    <div class="ps-0">
                                        <small class="fa fa-star text-warning"></small>
                                        <small class="fa fa-star text-warning"></small>
                                        <small class="fa fa-star text-warning"></small>
                                        <small class="fa fa-star text-warning"></small>
                                        <small class="fa fa-star text-warning"></small>
                                    </div>
                                </div>
                                <div class="d-flex mb-3">
                                    <small class="border-end me-3 pe-3"><i class="fa-solid fa-location-dot text-warning me-2"></i>@hotel.HotelAddress</small>
                                </div>
                                <p class="text-body mb-3">@hotel.HotelDescription</p>
                            </div>
                        </div>
                    </a>
                }
            }
        </div>


    </div>
</div>


<div class="container-xxl py-5 px-0 wow fadeIn" data-wow-delay="0.1s">
    <div class="row g-0">
        <div class="col-md-6 bg-dark d-flex align-items-center">
            <div class="p-5">
                <h6 class="section-title text-start text-white text-uppercase mb-3">Luxury Living</h6>
                <h1 class="text-white mb-4">Discover A Brand Luxurious Hotel</h1>
                <p class="text-white mb-4">
                    Tempor erat elitr rebum at clita. Diam dolor diam ipsum sit.
                    Aliqu diam amet diam et eos. Clita erat ipsum et lorem et sit,
                    sed stet lorem sit clita duo justo magna dolore erat amet
                </p>
                <a href="" class="btn btn-primary py-md-3 px-md-5 me-3">Our Rooms</a>
                <a href="" class="btn btn-light py-md-3 px-md-5">Book A Room</a>
            </div>
        </div>
        <div class="col-md-6">
            <div class="video">
                <button type="button" class="btn-play" data-bs-toggle="modal"
                        data-src="https://www.youtube.com/embed/DWRcNpR6Kdc">
                    <span></span>
                </button>
            </div>
        </div>
        <div class="modal fade" id="videoModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content rounded-0">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Youtube Video</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="ratio ratio-16x9">
                            <iframe class="embed-responsive-item" src id="video" allowfullscreen
                                    allowscriptaccess="always" allow="autoplay"></iframe>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="container-xxl py-5">
    <div class="container">
        <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
            <h6 class="section-title text-center text-warning text-uppercase">Our Services</h6>
            <h1 class="mb-5">Explore Our <span class="text-warning text-uppercase">Services</span></h1>
        </div>
        <div class="row g-4">
            <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.1s">
                <a class="service-item text-center rounded" href="">
                    <div class="service-icon bg-transparent border rounded mx-auto mb-4 p-1">
                        <div class="w-100 h-100 border rounded d-flex align-items-center justify-content-center">
                            <i class="fa fa-hotel fa-2x text-warning"></i>
                        </div>
                    </div>
                    <h5 class="mb-3">Rooms & Appartment</h5>
                    <p class="text-body mb-0">
                        Erat ipsum justo amet duo et elitr dolor, est duo duo eos lorem
                        sed diam stet diam sed stet lorem.
                    </p>
                </a>
            </div>
            <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.2s">
                <a class="service-item text-center rounded" href="">
                    <div class="service-icon bg-transparent border rounded mx-auto mb-4 p-1">
                        <div class="w-100 h-100 border rounded d-flex align-items-center justify-content-center">
                            <i class="fa fa-utensils fa-2x text-warning"></i>
                        </div>
                    </div>
                    <h5 class="mb-3">Food & Restaurant</h5>
                    <p class="text-body mb-0">
                        Erat ipsum justo amet duo et elitr dolor, est duo duo eos lorem
                        sed diam stet diam sed stet lorem.
                    </p>
                </a>
            </div>
            <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.3s">
                <a class="service-item text-center rounded" href="">
                    <div class="service-icon bg-transparent border rounded mx-auto mb-4 p-1">
                        <div class="w-100 h-100 border rounded d-flex align-items-center justify-content-center">
                            <i class="fa fa-spa fa-2x text-warning"></i>
                        </div>
                    </div>
                    <h5 class="mb-3">Spa & Fitness</h5>
                    <p class="text-body mb-0">
                        Erat ipsum justo amet duo et elitr dolor, est duo duo eos lorem
                        sed diam stet diam sed stet lorem.
                    </p>
                </a>
            </div>
            <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.4s">
                <a class="service-item text-center rounded" href="">
                    <div class="service-icon bg-transparent border rounded mx-auto mb-4 p-1">
                        <div class="w-100 h-100 border rounded d-flex align-items-center justify-content-center">
                            <i class="fa fa-swimmer fa-2x text-warning"></i>
                        </div>
                    </div>
                    <h5 class="mb-3">Sports & Gaming</h5>
                    <p class="text-body mb-0">
                        Erat ipsum justo amet duo et elitr dolor, est duo duo eos lorem
                        sed diam stet diam sed stet lorem.
                    </p>
                </a>
            </div>
            <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.5s">
                <a class="service-item text-center rounded" href="">
                    <div class="service-icon bg-transparent border rounded mx-auto mb-4 p-1">
                        <div class="w-100 h-100 border rounded d-flex align-items-center justify-content-center">
                            <i class="fa fa-glass-cheers fa-2x text-warning"></i>
                        </div>
                    </div>
                    <h5 class="mb-3">Event & Party</h5>
                    <p class="text-body mb-0">
                        Erat ipsum justo amet duo et elitr dolor, est duo duo eos lorem
                        sed diam stet diam sed stet lorem.
                    </p>
                </a>
            </div>
            <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.6s">
                <a class="service-item text-center rounded" href="">
                    <div class="service-icon bg-transparent border rounded mx-auto mb-4 p-1">
                        <div class="w-100 h-100 border rounded d-flex align-items-center justify-content-center">
                            <i class="fa fa-dumbbell fa-2x text-warning"></i>
                        </div>
                    </div>
                    <h5 class="mb-3">GYM & Yoga</h5>
                    <p class="text-body mb-0">
                        Erat ipsum justo amet duo et elitr dolor, est duo duo eos lorem
                        sed diam stet diam sed stet lorem.
                    </p>
                </a>
            </div>
        </div>
    </div>
</div>

<div class="container-xxl py-5">
    <div class="container">
        <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
            <h6 class="section-title text-center text-primary text-uppercase">Blog Post</h6>
            <h1 class="mb-5">Latest From <span class="text-primary text-uppercase">Blog</span></h1>
        </div>
        <div class="row g-4">
            <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.1s">
                <div class="blog-item rounded">
                    <div class="overflow-hidden">
                        <img class="img-fluid" src="img/blog-1.jpg" alt>
                    </div>
                    <div class="p-4">
                        <div class="d-flex mx-n2 mb-3">
                            <small class="mx-2"><i class="fa fa-user-alt text-primary me-2"></i>John Doe</small>
                            <small class="mx-2"><i class="fa fa-calendar-alt text-primary me-2"></i>01 Jan 2045</small>
                        </div>
                        <h5 class="lh-base mb-3">
                            Diam rebum diam clita rebum lorem ipsum sed elitr diam sed clita amet
                        </h5>
                        <a href class="fw-medium text-uppercase">Read More <i class="bi bi-arrow-right"></i></a>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.3s">
                <div class="blog-item rounded">
                    <div class="overflow-hidden">
                        <img class="img-fluid" src="img/blog-2.jpg" alt>
                    </div>
                    <div class="p-4">
                        <div class="d-flex mx-n2 mb-3">
                            <small class="mx-2"><i class="fa fa-user-alt text-primary me-2"></i>John Doe</small>
                            <small class="mx-2"><i class="fa fa-calendar-alt text-primary me-2"></i>01 Jan 2045</small>
                        </div>
                        <h5 class="lh-base mb-3">
                            Diam rebum diam clita rebum lorem ipsum sed elitr diam sed clita amet
                        </h5>
                        <a href class="fw-medium text-uppercase">Read More <i class="bi bi-arrow-right"></i></a>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.5s">
                <div class="blog-item rounded">
                    <div class="overflow-hidden">
                        <img class="img-fluid" src="img/blog-3.jpg" alt>
                    </div>
                    <div class="p-4">
                        <div class="d-flex mx-n2 mb-3">
                            <small class="mx-2"><i class="fa fa-user-alt text-primary me-2"></i>John Doe</small>
                            <small class="mx-2"><i class="fa fa-calendar-alt text-primary me-2"></i>01 Jan 2045</small>
                        </div>
                        <h5 class="lh-base mb-3">
                            Diam rebum diam clita rebum lorem ipsum sed elitr diam sed clita amet
                        </h5>
                        <a href class="fw-medium text-uppercase">Read More <i class="bi bi-arrow-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        document.querySelectorAll('a.room-item .text-body.mb-3').forEach(function (p) {
            let fullText = p.textContent;
            let words = fullText.split(' ');

            if (words.length > 6) {
                let shortText = words.slice(0, 6).join(' ') + '...';
                p.textContent = shortText;
            }
        });
        document.addEventListener("DOMContentLoaded", function () {
            var firstCategoryId = '@(Model.ListCategory != null && Model.ListCategory.Any() ? Model.ListCategory.First().CategoryId : "0")';
            selectedCategory(document.querySelector('.category-oval'), firstCategoryId);
            // Lấy thông tin khách sạn từ server và lưu vào biến hotelInfo
            var hotelInfo = @Html.Raw(ViewData["HotelInfo"]);

            // Hàm autocomplete nhận 2 tham số: trường nhập liệu và mảng các giá trị gợi ý
            function autocomplete(inp, arr) {
                var currentFocus; // Biến lưu chỉ số của gợi ý hiện tại (đang được chọn)

                // Khi người dùng nhập vào trường inp
                inp.addEventListener("input", function (e) {
                    var a, b, i, val = this.value; // Tạo biến cho danh sách gợi ý và giá trị người dùng nhập
                    closeAllLists(); // Đóng tất cả danh sách gợi ý đang mở trước đó
                    if (!val) { return false; } // Nếu không có giá trị, thoát khỏi hàm
                    currentFocus = -1; // Đặt chỉ số gợi ý hiện tại về -1

                    // Tạo một thẻ DIV để chứa các gợi ý
                    a = document.createElement("DIV");
                    a.setAttribute("id", this.id + "autocomplete-list"); // Thiết lập ID cho DIV
                    a.setAttribute("class", "autocomplete-items"); // Thiết lập class cho DIV

                    // Thêm DIV này vào làm phần tử con của trường nhập liệu
                    this.parentNode.appendChild(a);

                    // Duyệt qua các giá trị trong mảng arr
                    for (i = 0; i < arr.length; i++) {
                        var matchIndex = arr[i].toUpperCase().indexOf(val.toUpperCase());
                        if (matchIndex > -1) {
                            // Tạo một thẻ DIV cho mỗi phần tử khớp
                            b = document.createElement("DIV");
                            const beforeMatch = arr[i].substr(0, matchIndex);
                            const matchText = arr[i].substr(matchIndex, val.length);
                            const afterMatch = arr[i].substr(matchIndex + val.length);
                            // Làm nổi bật phần chữ trùng khớp
                            b.innerHTML = beforeMatch + "<strong>" + matchText + "</strong>" + afterMatch;
                            // Thêm một trường input ẩn để lưu giá trị của phần tử hiện tại
                            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";

                            // Khi người dùng click vào gợi ý
                            b.addEventListener("click", function (e) {
                                // Đưa giá trị của gợi ý vào trường nhập liệu
                                inp.value = this.getElementsByTagName("input")[0].value;
                                // Đóng tất cả danh sách gợi ý
                                closeAllLists();
                            });
                            // Thêm thẻ DIV này vào danh sách gợi ý
                            a.appendChild(b);
                        }
                    }
                });

                // Khi người dùng nhấn phím trong trường nhập liệu
                inp.addEventListener("keydown", function (e) {
                    var x = document.getElementById(this.id + "autocomplete-list");
                    if (x) x = x.getElementsByTagName("div");
                    if (e.keyCode == 40) { // Nếu nhấn phím mũi tên xuống
                        currentFocus++; // Tăng chỉ số của gợi ý hiện tại
                        addActive(x); // Làm nổi bật gợi ý hiện tại
                    } else if (e.keyCode == 38) { // Nếu nhấn phím mũi tên lên
                        currentFocus--; // Giảm chỉ số của gợi ý hiện tại
                        addActive(x); // Làm nổi bật gợi ý hiện tại
                    } else if (e.keyCode == 13) { // Nếu nhấn phím Enter
                        e.preventDefault(); // Ngăn không cho form bị submit
                        if (currentFocus > -1) { // Nếu có gợi ý nào đang được chọn
                            if (x) x[currentFocus].click(); // Kích hoạt click vào gợi ý đó
                        }
                    }
                });

                // Hàm thêm class "active" cho gợi ý hiện tại
                function addActive(x) {
                    if (!x) return false; // Nếu không có gợi ý, thoát khỏi hàm
                    removeActive(x); // Xóa class "active" khỏi tất cả các gợi ý
                    if (currentFocus >= x.length) currentFocus = 0; // Nếu vượt quá, quay lại đầu
                    if (currentFocus < 0) currentFocus = (x.length - 1); // Nếu dưới mức, quay lại cuối
                    x[currentFocus].classList.add("autocomplete-active"); // Thêm class "active"
                }

                // Hàm xóa class "active" khỏi tất cả các gợi ý
                function removeActive(x) {
                    for (var i = 0; i < x.length; i++) {
                        x[i].classList.remove("autocomplete-active");
                    }
                }

                // Hàm đóng tất cả các danh sách gợi ý, trừ danh sách được chỉ định
                function closeAllLists(elmnt) {
                    var x = document.getElementsByClassName("autocomplete-items");
                    for (var i = 0; i < x.length; i++) {
                        if (elmnt != x[i] && elmnt != inp) {
                            x[i].parentNode.removeChild(x[i]);
                        }
                    }
                }

                // Khi người dùng click vào bất kỳ đâu trên tài liệu, đóng tất cả các danh sách gợi ý
                document.addEventListener("click", function (e) {
                    closeAllLists(e.target);
                });
            }

            // Gọi hàm autocomplete với trường nhập liệu có ID "myInput" và mảng hotelInfo để khởi tạo tính năng
            autocomplete(document.getElementById("myInput"), hotelInfo);


            //lấy ngày hiện tại
            const today = new Date();
            const day = String(today.getDate()).padStart(2, '0'); //trả về ngày và chuyển thành chuỗi, sau đó thêm 0 vào đằng trước ngày nếu ngày đó có 1 chữ số
            const month = String(today.getMonth() + 1).padStart(2, '0');//trả về tháng và chuyển thành chuỗi, sau đó thêm 0 vào đằng trước tháng nếu tháng đó có 1 chữ số
            //cộng 1 là vì trả về giá trị từ 0 đến 11 nên +1 cho đúng tháng hiện tại
            const year = today.getFullYear();//trả về năm hiện tại
            const tomorrow = new Date(today);
            tomorrow.setDate(today.getDay() + 1);
            const nextDay = String(today.getDate() + 1).padStart(2, '0');
            const nextMonth = String(tomorrow.getMonth() + 1).padStart(2, '0');
            const nextYear = tomorrow.getFullYear();
            const formatDate = `${year}-${month}-${day} to ${nextYear}-${nextMonth}-${nextDay}`;
            const dateInput = document.getElementById('dateInput');
            if (dateInput) {
                dateInput.value = formatDate;
            }


            //Khung search ngày booking
            //hiển thị lịch
            const calendarContainer = document.getElementById('calendarContainer');
            // Lấy phần tử lịch của tháng hiện tại và gán vào biến currentMonthCalendar
            const currentMonthCalendar = document.getElementById('currentMonthCalendar');

            // Lấy phần tử lịch của tháng sau và gán vào biến nextMonthCalendar
            const nextMonthCalendar = document.getElementById('nextMonthCalendar');
            // Biến để lưu trữ độ lệch tháng (dùng để di chuyển qua lại giữa các tháng)
            let currentMonthOffset = 0;

            let selectedDates = [];

            dateInput.addEventListener('click', () => {
                calendarContainer.style.display = 'block';
                displayCalendars();
            });

            function displayCalendars() {
                const currentDate = new Date();
                const firstMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + currentMonthOffset, 1);
                const secondMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + currentMonthOffset + 1, 1);
                currentMonthCalendar.innerHTML = generateCalendar(firstMonthDate, 'current');
                nextMonthCalendar.innerHTML = generateCalendar(secondMonthDate, 'next');

                const prevButton = document.querySelector('.prev-month');
                if (currentMonthOffset === 0) {
                    prevButton.disabled = true;
                    prevButton.style.opacity = '0.5';
                } else {
                    prevButton.disabled = false;
                    prevButton.style.opacity = '1';
                }
            }
            function generateCalendar(date, calendarType) {
                const month = date.getMonth();
                const year = date.getFullYear();
                const today = new Date();
                today.setHours(0, 0, 0, 0);// Đặt thời gian của today về 00:00:00 để so sánh chỉ ngày
                const isCurrentMonth = today.getFullYear() === year && today.getMonth() === month;
                const daysInMonth = new Date(year, month + 1, 0).getDate();
                let calendarHtml = `
                            <div class="calendar-header">
                                <h5>${date.toLocaleString('default', { month: 'long' })} ${year}</h5>
                                <div class="calendar-button">
                                    <button class="prev-month" data-calendar="${calendarType}">&lt;</button>
                                    <button class="next-month" data-calendar="${calendarType}">&gt;</button>
                                </div>
                            </div>
                            <table><tr>`;
                const daysOfWeek = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];

                daysOfWeek.forEach(day => {
                    calendarHtml += `<th>${day}</th>`;
                });
                calendarHtml += `</tr><tr>`;


                const firstDay = new Date(year, month, 1).getDay();

                for (let i = 0; i < firstDay; i++) {
                    calendarHtml += `</td><td>`;
                }
                for (let day = 1; day <= daysInMonth; day++) {
                    const fullDate = new Date(year, month, day);

                    const isDisable = isCurrentMonth && fullDate < today;
                    const dayClass = isDisable ? 'calendar-day disabled-day' : 'calendar-day';
                    calendarHtml += `<td class="${dayClass}" data-date="${year}-${month + 1}-${day}">${day}</td>`;
                    if ((firstDay + day - 1) % 7 == 6) {
                        calendarHtml += `</tr><tr>`;
                    }
                }
                calendarHtml += `</tr></table>`;
                return calendarHtml;
            }

            function updateMonthOffset(offset) {
                currentMonthOffset += offset;
                displayCalendars();
            }

            document.addEventListener('click', function (event) {
                if (!calendarContainer.contains(event.target) && event.target !== dateInput) {
                    if (selectedDates.length !== 2) {
                        selectedDates = [];
                    }
                    calendarContainer.style.display = 'none';
                }
                if (event.target.classList.contains('prev-month')) {
                    updateMonthOffset(-1);
                }
                else if (event.target.classList.contains('next-month')) {
                    updateMonthOffset(1);
                }
                if (event.target.classList.contains('calendar-day')) {
                    const selectedDate = event.target.getAttribute('data-date');// Lấy giá trị ngày được chọn
                    if (selectedDates.length < 2) {
                        selectedDates.push(selectedDate);// Thêm ngày vào danh sách nếu chưa đủ 2 ngày
                        event.target.classList.add('selected');
                    } else {
                        selectedDates = [selectedDate];// Nếu đã chọn 2 ngày, chọn lại từ đầu
                        event.target.classList.add('selected');
                    }
                    if (selectedDates.length === 2) {
                        document.querySelectorAll('.calendar-day').forEach(day => { //lấy tất cả các phần tử calendar-day
                            if (selectedDates.includes(day.getAttribute('data-date'))) { //thuộc tính data-date trong mảng selectedDates
                                day.classList.add('selected');
                            }
                        })
                        setTimeout(() => {
                            dateInput.value = `${selectedDates[0]} - ${selectedDates[1]}`;// Cập nhật giá trị input
                            calendarContainer.style.display = 'none';// Ẩn lịch
                        }, 200);

                    }
                }
            });

            displayCalendars();

            const roomtypeInput = document.getElementById('roomtypeInput');
            const roomtypeContainer = document.getElementById('roomtypeContainer');

            roomtypeInput.addEventListener('click', () => {
                roomtypeContainer.style.display = 'block';
            });
            document.addEventListener('click', (event) => {
                if (!roomtypeInput.contains(event.target) && !roomtypeContainer.contains(event.target)) {
                    roomtypeContainer.style.display = 'none';
                }
            });

            const adultCountInput = document.getElementById("adultCount");
            const childrentCountInput = document.getElementById("childrentCount");
            const numberOfRoomCountInput = document.getElementById("numberOfRoomCount");
            const decreaseAdultButton = document.getElementById("decreaseAdultButton");
            const increaseAdultButton = document.getElementById("increaseAdultButton");
            const decreaseChildrentButton = document.getElementById("decreaseChildrentButton");
            const increaseChildrentButton = document.getElementById("increaseChildrentButton");
            const decreaseNumberOfRoomButton = document.getElementById("decreaseNumberOfRoomButton");
            const increaseNumberOfRoomButton = document.getElementById("increaseNumberOfRoomButton");

            function updateRoomTypeSummary() {
                const adults = adultCountInput.value;
                const childrents = childrentCountInput.value;
                const numberOfRoom = numberOfRoomCountInput.value;
                roomtypeInput.value = `${adults} người lớn, ${childrents} trẻ em, ${numberOfRoom} phòng`;
            }


            function increaseCounter(counter, maxValue) {
                let currentValue = parseInt(counter.value);
                if (currentValue < maxValue) {
                    counter.value = currentValue + 1;
                    updateRoomTypeSummary();
                }
            }
            function decreaseCounter(counter, minValue) {
                let currentValue = parseInt(counter.value);
                if (currentValue > minValue) {
                    counter.value = currentValue - 1;
                    updateRoomTypeSummary();
                }
            }

            document.getElementById("decreaseAdultButton").addEventListener("click", () => decreaseCounter(adultCountInput, 1));
            document.getElementById("increaseAdultButton").addEventListener("click", () => increaseCounter(adultCountInput, 30));
            document.getElementById("decreaseChildrentButton").addEventListener("click", () => decreaseCounter(childrentCountInput, 0));
            document.getElementById("increaseChildrentButton").addEventListener("click", () => increaseCounter(childrentCountInput, 6));
            document.getElementById("decreaseNumberOfRoomButton").addEventListener("click", () => decreaseCounter(numberOfRoomCountInput, 1));
            document.getElementById("increaseNumberOfRoomButton").addEventListener("click", () => increaseCounter(numberOfRoomCountInput, 8));


        });
    </script>
}